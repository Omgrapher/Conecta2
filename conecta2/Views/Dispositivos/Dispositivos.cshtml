@model conecta2.Controllers.DispositivosController.EstadoTierra
@{
    Layout = "_Layout";
    ViewData["Title"] = "Mis Iconos";
}
<div class="container mt-5 shadow-sm p-3 rounded">
    <h2 class="text-center mb-4">Mis Dispositivos</h2>

    <div class="mb-4">
        <h5 class="text-center">Dispositivo 1</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi1" onclick="toggleFoco(1, false)">
                <div class="card-body">
                    <i class="bi bi-lightbulb" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Apagar</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi1On" onclick="toggleFoco(1, true)">
                <div class="card-body">
                    <i class="bi bi-lightbulb-fill" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Encender</h5>
                </div>
            </div>
        </div>
        <div id="estado1" class="text-center">Estado: Apagado</div>
    </div>

    <div class="mb-4">
        <h5 class="text-center">Dispositivo 2</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi3" onclick="toggleFoco(3, false)">
                <div class="card-body">
                    <i class="bi bi-lightbulb" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Apagar</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi3On" onclick="toggleFoco(3, true)">
                <div class="card-body">
                    <i class="bi bi-lightbulb-fill" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Encender</h5>
                </div>
            </div>
        </div>
        <div id="estado3" class="text-center">Estado: Apagado</div>
    </div>

    <div class="mb-4">
        <h5 class="text-center">Dispositivo 3</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi1004" onclick="toggleFoco(1004, false)">
                <div class="card-body">
                    <i class="bi bi-plug" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Apagar</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi1004On" onclick="toggleFoco(1004, true)">
                <div class="card-body">
                    <i class="bi bi-plug-fill" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Encender</h5>
                </div>
            </div>
        </div>
        <div id="estado1004" class="text-center">Estado: Apagado</div>
    </div>

    <div class="mb-4">
        <h5 class="text-center">Dispositivo 4</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi1005" onclick="toggleFoco(1006, false)">
                <div class="card-body">
                    <i class="bi bi-arrow-up" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Subir</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi1005On" onclick="toggleFoco(1007, true)">
                <div class="card-body">
                    <i class="bi bi-arrow-down" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Bajar</h5>
                </div>
            </div>
        </div>
        <div id="estado1005" class="text-center">Estado: Apagado</div>
    </div>

    <!-- Contenedor para el Dispositivo 5 -->
    <div class="container mt-5">
        <div class="mb-4 text-center">
            <h5>Dispositivo 5</h5>
        </div>

        <!-- Este div contendrá el estado dinámico del dispositivo (actualizado por JavaScript) -->
        <div class="d-flex justify-content-center mb-3">
            <div class="row">
                <div id="estadoTierra" class="col-md-12">
                    <!-- El contenido dinámico del estado se cargará aquí por JavaScript -->
                    <div class="card text-white bg-secondary mb-3">
                        <div class="card-header">
                            <i class="fas fa-tint"></i> Consultando Estado...
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">Estado: Cargando</h5>
                            <p class="card-text">Obteniendo el estado actual del sensor de humedad.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    async function obtenerEstadoHumedad(idDispositivo) {
        try {
            const response = await fetch(`/Dispositivos/ObtenerEstadoHumedad?idDispositivo=${idDispositivo}`);
            if (!response.ok) {
                throw new Error('Error al obtener el estado del sensor de humedad: ' + response.statusText);
            }

            const result = await response.json();
            actualizarEstadoVisual(result.estado); // Llamada para actualizar la interfaz
        } catch (error) {
            console.error(error);
        }
    }

    function actualizarEstadoVisual(estado) {
        const estadoDiv = document.getElementById("estadoTierra");

        // Restablece el estilo inicial
        estadoDiv.innerHTML = ""; // Limpia contenido previo
        estadoDiv.className = ""; // Limpia clases previas

        if (estado === 0) {
            // Estado: Tierra Seca
            estadoDiv.classList.add("bg-warning", "text-dark");
            estadoDiv.innerHTML = `
                    <div class="col-md-12">
                        <div class="card text-dark bg-warning mb-3">
                            <div class="card-header">
                                <i class="fas fa-tint-slash"></i> Tierra Seca
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Seco</h5>
                                <p class="card-text">La tierra necesita agua, el nivel de humedad es bajo.</p>
                            </div>
                        </div>
                    </div>
                `;
        } else if (estado === 1) {
            // Estado: Tierra Húmeda
            estadoDiv.classList.add("bg-success", "text-white");
            estadoDiv.innerHTML = `
                    <div class="col-md-12">
                        <div class="card text-white bg-success mb-3">
                            <div class="card-header">
                                <i class="fas fa-tint"></i> Tierra Húmeda
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Húmedo</h5>
                                <p class="card-text">La tierra está en buen estado, el nivel de humedad es óptimo.</p>
                            </div>
                        </div>
                    </div>
                `;
        } else if (estado === 2) {
            // Estado: Fuera de la Tierra
            estadoDiv.classList.add("bg-danger", "text-white");
            estadoDiv.innerHTML = `
                    <div class="col-md-12">
                        <div class="card text-white bg-danger mb-3">
                            <div class="card-header">
                                <i class="fas fa-exclamation-triangle"></i> Sensor fuera de la tierra
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Fuera de la Tierra</h5>
                                <p class="card-text">El sensor no detecta humedad porque está fuera de la tierra.</p>
                            </div>
                        </div>
                    </div>
                `;
        }
    }

    // Llamada inicial para cargar el estado al cargar la página
    document.addEventListener("DOMContentLoaded", function () {
        obtenerEstadoHumedad(4); // ID del dispositivo
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        setInterval(() => {
            obtenerEstadoHumedad(4); // ID del dispositivo
        }, 5000); // Consulta cada 5 segundos
    });
</script>

<script>
    async function toggleFoco(idDispositivo, encender) {
        try {
            const response = await fetch(`/Dispositivos/ToggleFoco?idDispositivo=${idDispositivo}&encender=${encender}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(encender)
            });

            if (!response.ok) {
                throw new Error('Error al cambiar el estado del foco: ' + response.statusText);
            }

            const result = await response.json();
            console.log(result.message);

            // Actualizar el estado visual del dispositivo
            updateDeviceState(idDispositivo, encender);
        } catch (error) {
            console.error(error);
        }
    }
    // Actualiza el estado visual de cada dispositivo en función de si está encendido o apagado
    async function updateDeviceState(idDispositivo, encender) {
        const cardApagar = document.getElementById(`btnApi${idDispositivo}`);
        const cardEncender = document.getElementById(`btnApi${idDispositivo}On`);
        const estadoDiv = document.getElementById(`estado${idDispositivo}`);

        if (!cardApagar || !cardEncender || !estadoDiv) {
            console.error(`Elementos no encontrados para el ID: ${idDispositivo}`);
            return; // Salir si no se encuentran los elementos
        }

        // Limpiar clases de estilo en ambos botones
        cardApagar.classList.remove("border-success", "shadow-success", "border-danger", "shadow-danger");
        cardEncender.classList.remove("border-success", "shadow-success", "border-danger", "shadow-danger");

        // Actualizar el estado visual del dispositivo
        if (encender) {
            // Encendido: Verde en botón de encender
            cardEncender.classList.add("border-success", "shadow-success"); // Encender en verde
            estadoDiv.textContent = "Estado: Encendido";
        } else {
            // Apagado: Rojo en botón de apagar
            cardApagar.classList.add("border-danger", "shadow-danger");     // Apagar en rojo
            estadoDiv.textContent = "Estado: Apagado";
        }
    }

    // Obtener estado inicial de los dispositivos al cargar la página
    async function obtenerEstadoDispositivos() {
        try {
            // Solicitar el estado inicial de cada dispositivo
            const dispositivos = [1, 3, 1004, 1005]; // IDs de los dispositivos
            for (const id of dispositivos) {
                const response = await fetch(`/Dispositivos/ObtenerFoco?idDispositivo=${id}`);
                const result = await response.json();
                if (result.message.includes("encendido")) {
                    updateDeviceState(id, true);  // Dispositivo encendido
                } else {
                    updateDeviceState(id, false); // Dispositivo apagado
                }
            }
        } catch (error) {
            console.error("Error al obtener los estados de los dispositivos:", error);
        }
    }

    // Llamada para cargar el estado inicial al cargar la página
    document.addEventListener("DOMContentLoaded", function () {
        obtenerEstadoDispositivos();
    });
</script>





<style>
    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Asegura que el contenedor ocupe el 100% de la altura */
    }

    .content {
        flex: 1; /* Este contendrá el contenido principal y se expandirá */
    }

    .card {
        transition: border-color 0.3s, box-shadow 0.3s;
    }

    .border-danger {
        border-color: red !important;
    }

    .shadow-danger {
        box-shadow: 0 0 10px rgba(255, 0, 0, 0.5) !important;
    }

    .border-success {
        border-color: green !important;
    }

    .shadow-success {
        box-shadow: 0 0 10px rgba(0, 128, 0, 0.5) !important;
    }
</style>
